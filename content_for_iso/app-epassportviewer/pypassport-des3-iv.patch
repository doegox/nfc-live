diff --git a/pypassport/src/pypassport/doc9303/bac.py b/pypassport/src/pypassport/doc9303/bac.py
index 6bf3bfd..b6539a4 100644
--- a/pypassport/src/pypassport/doc9303/bac.py
+++ b/pypassport/src/pypassport/doc9303/bac.py
@@ -173,7 +173,7 @@ class BAC(Logger):
         self.log("Concatenate RND.IFD, RND.ICC and Kifd")       
         self.log("\tS: " + binToHexRep(s))
          
-        tdes= DES3.new(self._ksenc,DES.MODE_CBC)
+        tdes= DES3.new(self._ksenc,DES.MODE_CBC,'\0'*8)
         eifd= tdes.encrypt(s)
         self.log("Encrypt S with TDES key Kenc as calculated in Appendix 5.2")
         self.log("\tEifd: " + binToHexRep(eifd))
@@ -206,7 +206,7 @@ class BAC(Logger):
         if mac(self._ksmac, pad(data[0:32])) != data[32:]:
             raise Exception, "The MAC value is not correct"
         
-        tdes= DES3.new(self._ksenc,DES.MODE_CBC)
+        tdes= DES3.new(self._ksenc,DES.MODE_CBC,'\0'*8)
         response = tdes.decrypt(data[0:32])
         response_kicc = response[16:32]
         Kseed = self._xor(self._kifd, response_kicc)
diff --git a/pypassport/src/pypassport/doc9303/securemessaging.py b/pypassport/src/pypassport/doc9303/securemessaging.py
index c4e4cf6..d4dd97f 100644
--- a/pypassport/src/pypassport/doc9303/securemessaging.py
+++ b/pypassport/src/pypassport/doc9303/securemessaging.py
@@ -189,7 +189,7 @@ class SecureMessaging(Ciphering):
         data = []
         if(do87Data):
             #There is a payload
-            tdes= DES3.new(self._ksenc,DES.MODE_CBC)
+            tdes= DES3.new(self._ksenc,DES.MODE_CBC,'\0'*8)
             data = unpad(tdes.decrypt(do87Data))
             self.log("Decrypt data of DO'87 with KSenc")
             self.log("\tDecryptedData: " + binToHexRep(data))
@@ -210,7 +210,7 @@ class SecureMessaging(Ciphering):
     
     def _padAndEncryptData(self, apdu):
         """ Pad the data, encrypt data with KSenc and build DO'87"""
-        tdes= DES3.new(self._ksenc,DES.MODE_CBC) 
+        tdes= DES3.new(self._ksenc,DES.MODE_CBC,'\0'*8) 
         paddedData = pad( hexRepToBin(apdu.getData()))
         enc = tdes.encrypt( paddedData )
         self.log("Pad data")
